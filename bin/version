#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# $Id: sdss_install_version 70491 2019-11-12 19:16:07Z nbmurphy $
#

from subprocess import Popen, PIPE

def execute_command(command=None, argument=None):
    '''Execute the passed terminal command.'''
    (ready,out,err,proc_returncode) = (True,None,None,None)
    if command:
        proc = Popen(command, stdout=PIPE, stderr=PIPE)
        if proc:
            (out, err) = proc.communicate() if proc else (None,None)
            proc_returncode = proc.returncode if proc else None
            if argument:
                out = out.decode("utf-8",argument) if isinstance(out,bytes) else out
                err = err.decode("utf-8",argument) if isinstance(err,bytes) else err
            else:
                out = out.decode("utf-8") if isinstance(out,bytes) else out
                err = err.decode("utf-8") if isinstance(err,bytes) else err
        else:
            ready = False
            print('ERROR: subprocess.Popen constructor failed.')
    else:
        ready = False
        print('ERROR: Missing argument `command` in method execute_command(). command: {}'.format(command))
    return (ready,out,err,proc_returncode)

# check current working directory is a git repository
command = ['git','rev-parse','--is-inside-work-tree']
(ready,out,err,proc_returncode) = execute_command(command=command)
if ready:
    if not (proc_returncode == 0 and out.strip() == 'true'):
        ready = False
        print('Error encountered while running the command `{}`, '
                .format(' '.join(command)) +
              'with the following error message. {}.'.format(err))
if ready:
    # check if a branch is checked out and, if so, print the branch name
    command = ['git','symbolic-ref','-q','--short','HEAD']
    (ready,out,err,proc_returncode) = execute_command(command=command)
if ready:
    if proc_returncode == 0:
        print('{!s}'.format(out.strip()))
    else:
        # check if a tag is checked out and, if so, print the tag name
        command = ['git','describe','--tags','--exact-match']
        (ready,out,err,proc_returncode) = execute_command(command=command)
        if ready:
            if proc_returncode == 0:
                print('{!s}'.format(out.strip()))
            else:
                ready = False
                print('Error encountered while running the command `{}`, '
                        .format(' '.join(command)) +
                      'with the following error message. {}.'.format(err))
